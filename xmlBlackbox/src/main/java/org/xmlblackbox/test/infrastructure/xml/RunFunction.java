/* Generated by Together */

package org.xmlblackbox.test.infrastructure.xml;

import java.io.IOException;
import java.io.StringReader;
import java.util.Hashtable;

import org.dbunit.dataset.DataSetException;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.apache.log4j.Logger;


import org.xmlblackbox.test.infrastructure.exception.TestException;
import org.xmlblackbox.test.infrastructure.functions.GenericRunnableFunction;
import org.xmlblackbox.test.infrastructure.interfaces.Repository;
import org.xmlblackbox.test.infrastructure.replacement.ReplaceFromXML;
import org.xmlblackbox.test.infrastructure.util.DBConnection;
import org.xmlblackbox.test.infrastructure.util.MemoryData;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.Vector;

public class RunFunction extends XmlElement {


	private final static Logger log = Logger.getLogger(RunFunction.class);

    private String templateClass;
    private HashMap<String, String> input;
    private HashMap<String, String> output;
	
	public HashMap<String, String> getInput() {
		return input;
	}
	public void setInput(HashMap<String, String> input) {
		this.input = input;
	}
	public HashMap<String, String> getOutput() {
		return output;
	}
	public void setOutput(HashMap<String, String> output) {
		this.output = output;
	}
	public String getTemplateClass() {
		return templateClass;
	}
	public void setTemplateClass(String templateClass) {
		this.templateClass = templateClass;
	}

	public RunFunction(Element el) throws Exception {
		super(el);
		build(el);
	}
	
	public void build(Element setRunFunction) throws Exception {
		RunFunction runFunction = this;
		runFunction.setTemplateClass(setRunFunction.getAttributeValue("class"));
		runFunction.setInput(parseParameters(setRunFunction.getChild("PARAMETERS")));
	}

	@Override
	public String getRepositoryName() {
		return Repository.RUN_FUNCTION;
	}
	
    public void executeFunction(MemoryData memory) throws TestException, Exception{

    	Properties prop = memory.getOrCreateRepository(getRepositoryName());
    	//Immetto i parameters di input nella memoria..
    	prop.putAll(getInput());
    	
    	// Instanzio la classe..
    	Class functionClass=Class.forName(getTemplateClass());
    	
    	// Inizializzo il costruttore..
    	GenericRunnableFunction runFunctionImpl = null;
    	runFunctionImpl = (GenericRunnableFunction) functionClass.getConstructor().newInstance();
    	
    	// Eseguo la funzione
    	runFunctionImpl.checkPrametersName(prop, runFunctionImpl.getParametersName());
    	// DBConnection deve essere stato gia avviato...
    	runFunctionImpl.execute(prop,DBConnection.getConnection().getConnection()); 	
    }



}